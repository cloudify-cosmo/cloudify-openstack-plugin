tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - plugin:cloudify-openstack-plugin
  # - ../plugin.yaml

inputs:

  username:
    type: string
    default: { get_secret: keystone_username }

  keystone_password:
    type: string
    default: { get_secret: keystone_password }

  tenant_name:
    type: string
    default: { get_secret: keystone_tenant_name }

  auth_url:
    type: string
    default: { get_secret: keystone_url }

  region:
    type: string
    default: { get_secret: region }

  network_id:
    type: string
    default: { get_secret: public_network_name }

  subnet_id:
    type: string
    default: { get_secret: public_subnet_name }

  fixed_ip:
    type: string
    default: 192.168.120.200

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_input: username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: tenant_name }
    auth_url: { get_input: auth_url }
    region: { get_input: region }

node_templates:

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
      # fixed_ip: { get_input: fixed_ip }
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              name: os_port
              fixed_ips:
              - ip_address: { get_input: fixed_ip }
                subnet_id: { get_attribute: [ private_subnet, external_id ] }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: test-security-group
        description: My Test Security Group

  private_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: subnet_id }
    relationships:
      - type: cloudify.relationships.contained_in
        target: private_network

  private_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_input: network_id }
